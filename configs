{
    "EncodedData": "[{"flag":"de","data":"vless:\/\/e25c52cb-b3dd-4c9e-89a8-c04f3904d935@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.g1.korda.MONSTER.&security=none#g1\r\n\r\nvless:\/\/5a2994e0-7671-47bf-bdc7-3353ada4975d@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.g2.vpnet.SHOP.&security=none#g2"},{"flag":"us","data":"vless:\/\/0373d170-400f-46d7-86f6-759894ba7c1d@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.de1.korda.WORLD.&security=none#de1\r\n\r\nvless:\/\/a7417b95-5409-432f-83e1-43414a4e3d0a@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.de2.vpnet.SITE.&security=none#de2"},{"flag":"de","data":"{\r\n  \"remarks\": \"g1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"e25c52cb-b3dd-4c9e-89a8-c04f3904d935\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"wwW.speeDTesT.Net.Ftp.deBIaN.org.xN--iHqVLaa157dBvCiyG50OKGgL0R2F5Bcj1A.g1.KorDA.mOnsTeR.\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"},{"flag":"de","data":"{\r\n  \"remarks\": \"de1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"0373d170-400f-46d7-86f6-759894ba7c1d\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"www.SPeeDtEsT.NEt.iR.com.siTE.Xn--fHQ0la447aaC5504dEa701axr1g.de1.KOrdA.worLD.\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"}]"
}
