{
    "EncodedData": "[{"flag":"de","data":"vless:\/\/8d7a9be8-4a98-4e01-a579-42ef2957d252@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.g1.korda.BOND.&security=none#g1\r\n\r\nvless:\/\/1065cfd8-8c4c-4376-9ccb-452b39eedfd5@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.g2.korda.CHRISTMAS.&security=none#g2"},{"flag":"de","data":"{\r\n  \"remarks\": \"g1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"8d7a9be8-4a98-4e01-a579-42ef2957d252\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"WWW.SpeEDTESt.nEt.ir.COm.sitE.xN--fhQ0la447aAC5504deA701aXr1G.g1.koRda.bONd.\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"},{"flag":"us","data":"vless:\/\/1e1709e6-08b3-4249-b656-a8daa688f60d@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.u.zheva.SHOP.&security=none#u2\r\n\r\nvless:\/\/9816f405-d987-40ed-8a8c-1b4a22586dbf@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.u1.zheva.ONLINE&security=none#u1"},{"flag":"us","data":"{\r\n  \"remarks\": \"u1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"9816f405-d987-40ed-8a8c-1b4a22586dbf\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"wWw.spEedtEst.NEt.Ftp.DEbIaN.oRG.xn--IhQVLaA157dBVCIyg50OKgGl0R2F5BCj1A.u1.Zheva.onlInE\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"}]"
}
