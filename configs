{
    "EncodedData": "[{"flag":"de","data":"vless:\/\/0c5453a4-2b67-4155-8cca-0feab87bc7a2@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.g2.korda.CHRISTMAS.&security=none#g2\r\n\r\nvless:\/\/5ce7df46-cbf9-4d93-9e5a-af157fde155d@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ir.Com.Site.xn--fhq0la447aac5504dea701axr1g.g1.korda.BOND.&security=none#g1"},{"flag":"us","data":"vless:\/\/f95f7711-1e1c-45fc-83f9-92803dde5e4d@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.u1.kandi.FUN.&security=none#u1\r\n\r\nvless:\/\/3e9bed74-a2d4-40cf-a1f5-3b7abf7a0672@www.speedtest.net:80?type=ws&path=%2F%3Fed%3D2048&host=www.speedtest.net.ftp.debian.org.xn--ihqvlaa157dbvciyg50okggl0r2f5bcj1a.u2.korda.life&security=none#u2"},{"flag":"de","data":"{\r\n  \"remarks\": \"g1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"5ce7df46-cbf9-4d93-9e5a-af157fde155d\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"www.SPeedTEST.nET.iR.coM.SitE.xn--fHQ0lA447AAc5504dEa701AxR1g.G1.Korda.bOnd.\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"},{"flag":"us","data":"{\r\n  \"remarks\": \"u1 fragment\",\r\n  \"log\": {\r\n    \"access\": \"\",\r\n    \"error\": \"\",\r\n    \"loglevel\": \"warning\"\r\n  },\r\n  \"inbounds\": [\r\n    {\r\n      \"tag\": \"socks\",\r\n      \"port\": 10808,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"socks\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"http\",\r\n      \"port\": 10809,\r\n      \"listen\": \"127.0.0.1\",\r\n      \"protocol\": \"http\",\r\n      \"sniffing\": {\r\n        \"enabled\": true,\r\n        \"destOverride\": [\r\n          \"http\",\r\n          \"tls\"\r\n        ],\r\n        \"routeOnly\": false\r\n      },\r\n      \"settings\": {\r\n        \"auth\": \"noauth\",\r\n        \"udp\": true,\r\n        \"allowTransparent\": false\r\n      }\r\n    }\r\n  ],\r\n  \"outbounds\": [\r\n    {\r\n      \"tag\": \"proxy\",\r\n      \"protocol\": \"vless\",\r\n      \"settings\": {\r\n        \"vnext\": [\r\n          {\r\n            \"address\": \"www.speedtest.net\",\r\n            \"port\": 80,\r\n            \"users\": [\r\n              {\r\n                \"id\": \"f95f7711-1e1c-45fc-83f9-92803dde5e4d\",\r\n                \"alterId\": 0,\r\n                \"email\": \"t@t.tt\",\r\n                \"security\": \"auto\",\r\n                \"encryption\": \"none\",\r\n                \"flow\": \"\"\r\n              }\r\n            ]\r\n          }\r\n        ]\r\n      },\r\n      \"streamSettings\": {\r\n        \"network\": \"ws\",\r\n        \"wsSettings\": {\r\n          \"path\": \"\/?ed=2560\",\r\n          \"headers\": {\r\n            \"Host\": \"WWW.SPEEDtEST.net.fTP.debIan.org.Xn--iHQVlaa157dbvciyg50OKGgL0r2F5bcj1a.U1.kaNDI.FUN.\"\r\n          }\r\n        },\r\n        \"sockopt\": {\r\n          \"dialerProxy\": \"fragment\",\r\n          \"tcpKeepAliveIdle\": 100,\r\n          \"mark\": 255,\r\n          \"tcpNoDelay\": true\r\n        }\r\n      },\r\n      \"mux\": {\r\n        \"enabled\": true,\r\n        \"concurrency\": 8,\r\n        \"xudpConcurrency\": 8,\r\n        \"xudpProxyUDP443\": \"reject\"\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"fragment\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {\r\n        \"domainStrategy\": \"AsIs\",\r\n        \"fragment\": {\r\n          \"packets\": \"1-1\",\r\n          \"length\": \"1-3\",\r\n          \"interval\": \"5\"\r\n        }\r\n      },\r\n      \"streamSettings\": {\r\n        \"sockopt\": {\r\n          \"tcpNoDelay\": true,\r\n          \"tcpKeepAliveIdle\": 100\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"tag\": \"direct\",\r\n      \"protocol\": \"freedom\",\r\n      \"settings\": {}\r\n    },\r\n    {\r\n      \"tag\": \"block\",\r\n      \"protocol\": \"blackhole\",\r\n      \"settings\": {\r\n        \"response\": {\r\n          \"type\": \"http\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"routing\": {\r\n    \"domainStrategy\": \"AsIs\",\r\n    \"rules\": [\r\n      {\r\n        \"type\": \"field\",\r\n        \"inboundTag\": [\r\n          \"api\"\r\n        ],\r\n        \"outboundTag\": \"api\",\r\n        \"enabled\": true\r\n      },\r\n      {\r\n        \"id\": \"5627785659655799759\",\r\n        \"type\": \"field\",\r\n        \"port\": \"0-65535\",\r\n        \"outboundTag\": \"proxy\",\r\n        \"enabled\": true\r\n      }\r\n    ]\r\n  }\r\n}"}]"
}
